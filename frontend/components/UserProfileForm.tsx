/**\n * User Profile Form Component\n * \n * Handles user profile and investment preferences:\n * - Risk tolerance settings\n * - Investment amount and goals\n * - Time horizon preferences\n * - Investment style selection\n * - Age and income (optional)\n * \n * Features:\n * - Interactive form with validation\n * - Progressive disclosure\n * - Real-time updates\n * - Help text and tooltips\n * - Responsive design\n * - Data persistence\n */\n\n'use client'\n\nimport React, { useState } from 'react'\nimport { \n  UserProfile,\n  RISK_TOLERANCE_OPTIONS,\n  INVESTMENT_STYLE_OPTIONS,\n  TIME_HORIZON_OPTIONS\n} from '../lib/types'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Textarea } from '@/components/ui/textarea'\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\nimport { Badge } from '@/components/ui/badge'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { \n  User, \n  Target, \n  Clock,\n  TrendingUp,\n  DollarSign,\n  Info,\n  Plus,\n  X,\n  ChevronDown,\n  ChevronUp\n} from 'lucide-react'\n\ninterface UserProfileFormProps {\n  userProfile: UserProfile\n  onChange: (profile: UserProfile) => void\n  showAdvanced?: boolean\n}\n\nconst UserProfileForm: React.FC<UserProfileFormProps> = ({\n  userProfile,\n  onChange,\n  showAdvanced = false\n}) => {\n  // =============================================================================\n  // LOCAL STATE\n  // =============================================================================\n  \n  const [showAdvancedOptions, setShowAdvancedOptions] = useState(showAdvanced)\n  const [newGoal, setNewGoal] = useState('')\n  const [showGoalInput, setShowGoalInput] = useState(false)\n  const [errors, setErrors] = useState<{ [key: string]: string }>({})\n  \n  // =============================================================================\n  // VALIDATION\n  // =============================================================================\n  \n  const validateField = (field: string, value: any): string => {\n    switch (field) {\n      case 'investmentAmount':\n        if (!value || value <= 0) return 'Investment amount must be positive'\n        if (value < 1000) return 'Minimum investment amount is ₹1,000'\n        if (value > 10000000) return 'Maximum investment amount is ₹1,00,00,000'\n        return ''\n      \n      case 'age':\n        if (value && (value < 18 || value > 100)) {\n          return 'Age must be between 18 and 100'\n        }\n        return ''\n      \n      case 'annualIncome':\n        if (value && value <= 0) return 'Annual income must be positive'\n        return ''\n      \n      default:\n        return ''\n    }\n  }\n  \n  // =============================================================================\n  // HANDLERS\n  // =============================================================================\n  \n  const handleFieldChange = (field: keyof UserProfile, value: any) => {\n    const error = validateField(field, value)\n    setErrors(prev => ({ ...prev, [field]: error }))\n    \n    onChange({\n      ...userProfile,\n      [field]: value\n    })\n  }\n  \n  const handleAddGoal = () => {\n    if (newGoal.trim() && !userProfile.goals.includes(newGoal.trim())) {\n      const updatedGoals = [...userProfile.goals, newGoal.trim()]\n      onChange({ ...userProfile, goals: updatedGoals })\n      setNewGoal('')\n      setShowGoalInput(false)\n    }\n  }\n  \n  const handleRemoveGoal = (index: number) => {\n    const updatedGoals = userProfile.goals.filter((_, i) => i !== index)\n    onChange({ ...userProfile, goals: updatedGoals })\n  }\n  \n  const handleGoalKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      e.preventDefault()\n      handleAddGoal()\n    } else if (e.key === 'Escape') {\n      setNewGoal('')\n      setShowGoalInput(false)\n    }\n  }\n  \n  // =============================================================================\n  // RENDER HELPERS\n  // =============================================================================\n  \n  const renderRiskToleranceSelector = () => (\n    <div className=\"space-y-3\">\n      <Label className=\"text-base font-medium\">Risk Tolerance *</Label>\n      <div className=\"grid grid-cols-1 gap-3\">\n        {RISK_TOLERANCE_OPTIONS.map(option => (\n          <div\n            key={option.value}\n            className={`\n              p-4 border rounded-lg cursor-pointer transition-all\n              ${userProfile.riskTolerance === option.value \n                ? 'border-blue-500 bg-blue-50 ring-2 ring-blue-200' \n                : 'border-gray-200 hover:border-gray-300'\n              }\n            `}\n            onClick={() => handleFieldChange('riskTolerance', option.value)}\n          >\n            <div className=\"flex items-start justify-between\">\n              <div className=\"flex-1\">\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"font-medium\">{option.label}</span>\n                  {userProfile.riskTolerance === option.value && (\n                    <Badge variant=\"default\" className=\"text-xs\">Selected</Badge>\n                  )}\n                </div>\n                <p className=\"text-sm text-gray-600 mt-1\">{option.description}</p>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n  \n  const renderInvestmentStyleSelector = () => (\n    <div className=\"space-y-3\">\n      <Label className=\"text-base font-medium\">Investment Style *</Label>\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n        {INVESTMENT_STYLE_OPTIONS.map(option => (\n          <div\n            key={option.value}\n            className={`\n              p-3 border rounded-lg cursor-pointer transition-all\n              ${userProfile.investmentStyle === option.value \n                ? 'border-blue-500 bg-blue-50 ring-1 ring-blue-200' \n                : 'border-gray-200 hover:border-gray-300'\n              }\n            `}\n            onClick={() => handleFieldChange('investmentStyle', option.value)}\n          >\n            <div className=\"flex items-center gap-2 mb-1\">\n              <span className=\"font-medium\">{option.label}</span>\n              {userProfile.investmentStyle === option.value && (\n                <Badge variant=\"default\" className=\"text-xs\">Selected</Badge>\n              )}\n            </div>\n            <p className=\"text-xs text-gray-600\">{option.description}</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n  \n  const renderTimeHorizonSelector = () => (\n    <div className=\"space-y-3\">\n      <Label className=\"text-base font-medium\">Investment Time Horizon *</Label>\n      <div className=\"grid grid-cols-1 gap-2\">\n        {TIME_HORIZON_OPTIONS.map(option => (\n          <label\n            key={option.value}\n            className={`\n              flex items-center p-3 border rounded-lg cursor-pointer transition-all\n              ${userProfile.timeHorizon === option.value \n                ? 'border-blue-500 bg-blue-50' \n                : 'border-gray-200 hover:border-gray-300'\n              }\n            `}\n          >\n            <input\n              type=\"radio\"\n              name=\"timeHorizon\"\n              value={option.value}\n              checked={userProfile.timeHorizon === option.value}\n              onChange={(e) => handleFieldChange('timeHorizon', e.target.value)}\n              className=\"mr-3\"\n            />\n            <div className=\"flex-1\">\n              <span className=\"font-medium\">{option.label}</span>\n              <p className=\"text-sm text-gray-600\">{option.description}</p>\n            </div>\n          </label>\n        ))}\n      </div>\n    </div>\n  )\n  \n  const renderGoalsSection = () => (\n    <div className=\"space-y-3\">\n      <div className=\"flex items-center justify-between\">\n        <Label className=\"text-base font-medium\">Investment Goals</Label>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => setShowGoalInput(true)}\n          disabled={showGoalInput}\n        >\n          <Plus className=\"h-4 w-4 mr-1\" />\n          Add Goal\n        </Button>\n      </div>\n      \n      {/* Existing Goals */}\n      {userProfile.goals.length > 0 && (\n        <div className=\"flex flex-wrap gap-2\">\n          {userProfile.goals.map((goal, index) => (\n            <Badge\n              key={index}\n              variant=\"secondary\"\n              className=\"flex items-center gap-1 py-1 px-2\"\n            >\n              <span>{goal}</span>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"h-4 w-4 p-0 hover:bg-transparent\"\n                onClick={() => handleRemoveGoal(index)}\n              >\n                <X className=\"h-3 w-3\" />\n              </Button>\n            </Badge>\n          ))}\n        </div>\n      )}\n      \n      {/* Add Goal Input */}\n      {showGoalInput && (\n        <div className=\"flex gap-2\">\n          <Input\n            value={newGoal}\n            onChange={(e) => setNewGoal(e.target.value)}\n            onKeyDown={handleGoalKeyPress}\n            placeholder=\"e.g., Retirement planning, Child's education\"\n            className=\"flex-1\"\n            maxLength={100}\n          />\n          <Button size=\"sm\" onClick={handleAddGoal} disabled={!newGoal.trim()}>\n            Add\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => {\n              setNewGoal('')\n              setShowGoalInput(false)\n            }}\n          >\n            Cancel\n          </Button>\n        </div>\n      )}\n      \n      {userProfile.goals.length === 0 && !showGoalInput && (\n        <p className=\"text-sm text-gray-500 italic\">\n          Add your investment goals to get more personalized recommendations\n        </p>\n      )}\n    </div>\n  )\n  \n  // =============================================================================\n  // MAIN RENDER\n  // =============================================================================\n  \n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <User className=\"h-5 w-5\" />\n          Investment Profile\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Basic Information */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          {/* Investment Amount */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"investmentAmount\" className=\"flex items-center gap-2\">\n              <DollarSign className=\"h-4 w-4\" />\n              Investment Amount (₹) *\n            </Label>\n            <Input\n              id=\"investmentAmount\"\n              type=\"number\"\n              value={userProfile.investmentAmount || ''}\n              onChange={(e) => handleFieldChange('investmentAmount', parseFloat(e.target.value) || 0)}\n              placeholder=\"Total amount to invest\"\n              className={errors.investmentAmount ? 'border-red-500' : ''}\n            />\n            {errors.investmentAmount && (\n              <p className=\"text-sm text-red-600\">{errors.investmentAmount}</p>\n            )}\n            <p className=\"text-xs text-gray-500\">\n              Enter the total amount you plan to invest across all holdings\n            </p>\n          </div>\n          \n          {/* Advanced Toggle */}\n          <div className=\"flex items-end\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowAdvancedOptions(!showAdvancedOptions)}\n              className=\"w-full\"\n            >\n              {showAdvancedOptions ? (\n                <>\n                  <ChevronUp className=\"h-4 w-4 mr-2\" />\n                  Hide Advanced Options\n                </>\n              ) : (\n                <>\n                  <ChevronDown className=\"h-4 w-4 mr-2\" />\n                  Show Advanced Options\n                </>\n              )}\n            </Button>\n          </div>\n        </div>\n        \n        {/* Risk Tolerance */}\n        {renderRiskToleranceSelector()}\n        \n        {/* Investment Style */}\n        {renderInvestmentStyleSelector()}\n        \n        {/* Time Horizon */}\n        {renderTimeHorizonSelector()}\n        \n        {/* Investment Goals */}\n        {renderGoalsSection()}\n        \n        {/* Advanced Options */}\n        {showAdvancedOptions && (\n          <div className=\"space-y-6 pt-6 border-t\">\n            <h3 className=\"text-lg font-medium text-gray-900\">Additional Information</h3>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {/* Age */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"age\">Age (Optional)</Label>\n                <Input\n                  id=\"age\"\n                  type=\"number\"\n                  value={userProfile.age || ''}\n                  onChange={(e) => handleFieldChange('age', parseInt(e.target.value) || undefined)}\n                  placeholder=\"Your age\"\n                  min=\"18\"\n                  max=\"100\"\n                  className={errors.age ? 'border-red-500' : ''}\n                />\n                {errors.age && (\n                  <p className=\"text-sm text-red-600\">{errors.age}</p>\n                )}\n                <p className=\"text-xs text-gray-500\">\n                  Helps provide age-appropriate investment recommendations\n                </p>\n              </div>\n              \n              {/* Annual Income */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"annualIncome\">Annual Income (₹) (Optional)</Label>\n                <Input\n                  id=\"annualIncome\"\n                  type=\"number\"\n                  value={userProfile.annualIncome || ''}\n                  onChange={(e) => handleFieldChange('annualIncome', parseFloat(e.target.value) || undefined)}\n                  placeholder=\"Your annual income\"\n                  className={errors.annualIncome ? 'border-red-500' : ''}\n                />\n                {errors.annualIncome && (\n                  <p className=\"text-sm text-red-600\">{errors.annualIncome}</p>\n                )}\n                <p className=\"text-xs text-gray-500\">\n                  Used to assess investment amount relative to income\n                </p>\n              </div>\n            </div>\n          </div>\n        )}\n        \n        {/* Profile Summary */}\n        <div className=\"pt-6 border-t\">\n          <Alert>\n            <Info className=\"h-4 w-4\" />\n            <AlertDescription>\n              <div className=\"space-y-1\">\n                <p className=\"font-medium\">Profile Summary:</p>\n                <p className=\"text-sm\">\n                  {userProfile.riskTolerance ? (\n                    <>\n                      <span className=\"capitalize\">{userProfile.riskTolerance}</span> risk tolerance • \n                      <span className=\"capitalize\">{userProfile.investmentStyle}</span> investment style • \n                      <span className=\"capitalize\">{userProfile.timeHorizon}</span> term horizon\n                      {userProfile.investmentAmount > 0 && (\n                        <> • ₹{userProfile.investmentAmount.toLocaleString('en-IN')} investment</>  \n                      )}\n                    </>\n                  ) : (\n                    'Complete your profile to see a summary'\n                  )}\n                </p>\n              </div>\n            </AlertDescription>\n          </Alert>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default UserProfileForm"